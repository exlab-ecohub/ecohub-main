#Enable logging of SQL requests generated by Hibernate
#logging.level.org.hibernate.SQL=debug

#Enable logging parameters for generated SQL requests
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace

#Determines logging level for package
logging.level.ru.yandex.practicum=debug

#Enable logging of incoming http-requests (without parameters and headers) by using Spring Framework
logging.level.org.springframework.web.servlet.DispatcherServlet=trace

#Adds more information to previous logging case
#logging.level.org.springframework.web=debug

#Adds logging of http-request's parameters and headers in DispatcherServlet's logs
spring.mvc.log-request-details=true

#Enable logging of http-requests in JSON format by using external library named LogBook
#logging.level.org.zalando.logbook=TRACE

#Enable writing logs into the file and describes some parameters of this logging
logging.file.name=./log/ecohub.log
logging.logback.rollingpolicy.max-file-size=1MB
logging.logback.rollingpolicy.max-history=10

#Keycloak client registration configuration
spring.security.oauth2.client.registration.keycloak.client-id=ecohub-login
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid

#OIDC provider configuration
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/ecohub
#URI for validating certification of jwt-token
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=${spring.security.oauth2.client.provider.keycloak.issuer-uri}/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

#Configuration for validating JWT token against Keycloak server
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/ecohub

jwt.auth.converter.resource-id=ecohub-login
jwt.auth.converter.principal-attribute=preferred_username

spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL10Dialect
spring.jpa.properties.hibernate.format_sql=true
spring.sql.init.mode=always
spring.datasource.url=jdbc:postgresql://localhost:5432/${db.name}
spring.datasource.username=postgres
#spring.datasource.password=qweasdzxc
db.name=ecohub
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database=postgresql
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
server.port=8081
server.error.include-stacktrace=always
server.error.include-message=always

management.endpoints.web.exposure.include=mappings

spring.main.banner-mode=off




